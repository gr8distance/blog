---
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";

const posts = await getCollection("blog");
---

<Layout title="検索 | My Blog">
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-4xl font-bold mb-8">記事を検索</h1>
    <div class="max-w-2xl mx-auto">
      <div class="mb-8">
        <input
          type="text"
          id="searchInput"
          placeholder="キーワードを入力..."
          class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
      <div id="searchResults" class="space-y-6">
        <!-- 検索結果がここに動的に表示されます -->
      </div>
    </div>
  </main>
</Layout>

<script>
  const searchInput = document.getElementById(
    "searchInput",
  ) as HTMLInputElement;
  const searchResults = document.getElementById("searchResults");
  const posts = {
    type: "module",
    posts: [
      // ここに記事データが入ります
    ],
  };

  function debounce<T extends (...args: any[]) => void>(
    func: T,
    wait: number,
  ): (...args: Parameters<T>) => void {
    let timeout: ReturnType<typeof setTimeout>;
    return (...args: Parameters<T>) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func(...args), wait);
    };
  }

  const performSearch = debounce((searchTerm: string) => {
    if (!searchResults) return;

    searchResults.innerHTML = "検索中...";

    // 実際の検索ロジックをここに実装
    // 例: タイトルと説明文から検索
    const results = posts.posts.filter(
      (post) =>
        post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        post.description.toLowerCase().includes(searchTerm.toLowerCase()),
    );

    if (results.length === 0) {
      searchResults.innerHTML =
        '<p class="text-gray-600">検索結果が見つかりませんでした。</p>';
      return;
    }

    searchResults.innerHTML = results
      .map(
        (post) => `
          <article class="border rounded-lg p-6">
            <h2 class="text-2xl font-semibold mb-2">
              <a href="/blog/${post.slug}" class="hover:text-blue-600">
                ${post.title}
              </a>
            </h2>
            <p class="text-gray-600">${post.description}</p>
          </article>
        `,
      )
      .join("");
  }, 300);

  searchInput?.addEventListener("input", (e) => {
    const target = e.target as HTMLInputElement;
    performSearch(target.value);
  });
</script>
